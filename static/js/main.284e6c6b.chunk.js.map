{"version":3,"sources":["reducers/contactSlice.js","reducers/index.js","store.js","components/AddContact/AddContact.js","selectors/index.js","components/UpdateContact/UpdateContact.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","actions/contactAction.js","components/ContactDetails/ContactDetails.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["contactSlice","createSlice","name","initialState","contacts","currentContact","searchTerm","reducers","addContact","state","action","push","id","length","payload","deleteContact","filter","item","updateContact","map","fetchContactDetails","result","find","searchContact","actions","combineReducers","contactReducer","store","configureStore","reducer","rootReducer","mapDispatchToProps","connect","show","onContactSubmit","useState","email","phone","company","address","setState","useForm","register","handleSubmit","onChange","e","target","value","className","onSubmit","data","ref","required","pattern","type","getCurrentContact","getFilteredContacts","createSelector","includes","updateshow","onContactUpdate","useEffect","contactItem","onClick","size","createAction","contactDetail","dispatch","isOpen","isUpdateShow","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","cx","cy","r","placeholder","x1","y1","x2","y2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAEMA,EAAeC,YAAY,CAC/BC,KAAM,UACNC,aAAc,CACZC,SAAU,GACVC,eAAgB,GAChBC,WAAY,IAEdC,SAAU,CACRC,WADQ,SACGC,EAAOC,GAChBD,EAAML,SAASO,KAAf,aAAsBC,GAAIH,EAAML,SAASS,OAAS,GAAMH,EAAOI,WAEjEC,cAJQ,SAIMN,EAAOC,GACnBD,EAAML,SAAWK,EAAML,SAASY,QAC9B,SAACC,GAAD,OAAUA,EAAKL,KAAOF,EAAOI,WAG/B,IAAIT,EACFK,EAAOI,UAAYL,EAAMJ,eAAeO,GACpC,GACAH,EAAML,SAASS,OAAS,EACxBJ,EAAML,SAAS,GACf,GAENK,EAAMJ,eAAiBA,GAEzBa,cAlBQ,SAkBMT,EAAOC,GACnB,IAAMN,EAAWK,EAAML,SAASe,KAAI,SAACF,GACnC,OAAIA,EAAKL,KAAOF,EAAOI,QAAQF,GACtBF,EAAOI,QAEPG,KAIXR,EAAML,SAAWA,EAEjBK,EAAMJ,eAAiBK,EAAOI,SAEhCM,oBA/BQ,SA+BYX,EAAOC,GACzB,IAAMW,EAASZ,EAAML,SAASkB,MAAK,SAACL,GAAD,OAAUA,EAAKL,KAAOF,EAAOI,WAChEL,EAAMJ,eAAiBgB,GAEzBE,cAnCQ,SAmCMd,EAAOC,GACnBD,EAAMH,WAAaI,EAAOI,Y,EAW5Bd,EAAawB,QALfhB,E,EAAAA,WAEAU,G,EADAH,c,EACAG,eACAE,E,EAAAA,oBAIapB,G,EAHbuB,cAGavB,EAAf,SCxDeyB,cAAgB,CAC7BrB,SAAUsB,ICIGC,EAJDC,YAAe,CAC3BC,QAASC,I,sBC8FLC,EAAqB,CAAEvB,cACdwB,cAAQ,KAAMD,EAAdC,EA/FI,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,gBAAiB1B,EAAiB,EAAjBA,WAAiB,EAClC2B,mBAAS,CACjCjC,KAAM,GACNkC,MAAO,GACPC,MAAO,GACPC,QAAS,GACTC,QAAS,KANiD,mBACrD9B,EADqD,KAC9C+B,EAD8C,OAQzBC,cAA3BC,EARoD,EAQpDA,SAAUC,EAR0C,EAQ1CA,aAgBZC,EAAW,SAACC,GAChBL,EAAS,2BAAK/B,GAAN,kBAAcoC,EAAEC,OAAO5C,KAAO2C,EAAEC,OAAOC,UAGjD,OACE,kBAAC,WAAD,KACGd,EACC,yBAAKe,UAAU,SACb,yBAAKA,UAAU,iBACb,0BAAMA,UAAU,cAAcC,SAAUN,GAvBjC,SAACO,GAChB1C,EAAW,CACTN,KAAMO,EAAMP,KACZkC,MAAO3B,EAAM2B,MACbC,MAAO5B,EAAM4B,MACbC,QAAS7B,EAAM6B,QACfC,QAAS9B,EAAM8B,UAGjBC,EAAS,CAAEtC,KAAM,GAAIkC,MAAO,GAAIC,MAAO,GAAIC,QAAS,GAAIC,QAAS,KAEjEL,QAaU,yBAAKc,UAAU,aACb,uCACA,2BACEA,UAAU,aACV9C,KAAK,OACLiD,IAAKT,EAAS,CAAEU,UAAU,IAC1BL,MAAOtC,EAAMP,KACb0C,SAAUA,KAGd,yBAAKI,UAAU,aACb,wCACA,2BACEA,UAAU,aACV9C,KAAK,QACL6C,MAAOtC,EAAM2B,MACbe,IAAKT,EAAS,CACZW,QAAS,6CAEXT,SAAUA,KAGd,yBAAKI,UAAU,aACb,wCACA,2BACEA,UAAU,aACV9C,KAAK,QACL6C,MAAOtC,EAAM4B,MACbO,SAAUA,KAGd,yBAAKI,UAAU,aACb,0CACA,2BACEA,UAAU,aACV9C,KAAK,UACL6C,MAAOtC,EAAM6B,QACbM,SAAUA,KAGd,yBAAKI,UAAU,aACb,0CACA,8BACEA,UAAU,aACV9C,KAAK,UACL6C,MAAOtC,EAAM8B,QACbK,SAAUA,KAGd,4BAAQI,UAAU,MAAMM,KAAK,SAASP,MAAM,UAA5C,aAMJ,S,OCzFGQ,EAAoB,SAAC9C,GAAD,OAAWA,EAAML,SAASC,gBAI9CmD,EAAsBC,YACjC,CAPyB,SAAChD,GAAD,OAAWA,EAAML,SAASA,UAIxB,SAACK,GAAD,OAAWA,EAAML,SAASE,cAIrD,SAACF,EAAUE,GACT,MAAmB,KAAfA,EACmBF,EAASY,QAC5B,SAACC,GAAD,OACEA,EAAKf,KAAKwD,SAASpD,IACnBW,EAAKmB,MAAMsB,SAASpD,IACpBW,EAAKqB,QAAQoB,SAASpD,IACtBW,EAAKsB,QAAQmB,SAASpD,MAKnBF,KCqFP2B,EAAqB,CAAEb,iBACdc,eALS,SAACvB,GAAD,MAAY,CAClCJ,eAAgBkD,EAAkB9C,MAIIsB,EAAzBC,EAvGO,SAAC,GAKhB,IAJL2B,EAII,EAJJA,WACAzC,EAGI,EAHJA,cACAb,EAEI,EAFJA,eACAuD,EACI,EADJA,gBACI,EACsBzB,mBAAS,IAD/B,mBACG1B,EADH,KACU+B,EADV,OAE+BC,cAA3BC,EAFJ,EAEIA,SAAUC,EAFd,EAEcA,aAElBkB,qBAAU,WACRrB,EAASnC,KACR,CAACA,IAEJ,IAeMuC,EAAW,SAACC,GAChBL,EAAS,2BAAK/B,GAAN,kBAAcoC,EAAEC,OAAO5C,KAAO2C,EAAEC,OAAOC,UAGjD,OACE,kBAAC,WAAD,KACGY,EACC,yBAAKX,UAAU,SACb,yBAAKA,UAAU,iBACb,0BAAMA,UAAU,cAAcC,SAAUN,GAxBjC,SAACO,GAChBhC,EAAc,CACZN,GAAIH,EAAMG,GACVV,KAAMO,EAAMP,KACZkC,MAAO3B,EAAM2B,MACbC,MAAO5B,EAAM4B,MACbC,QAAS7B,EAAM6B,QACfC,QAAS9B,EAAM8B,UAGjBC,EAAS,CAAEtC,KAAM,GAAIkC,MAAO,GAAIC,MAAO,GAAIC,QAAS,GAAIC,QAAS,KAEjEqB,QAaU,yBAAKZ,UAAU,aACb,uCACA,2BACEA,UAAU,aACV9C,KAAK,OACLiD,IAAKT,EAAS,CAAEU,UAAU,IAC1BL,MAAOtC,EAAMP,KACb0C,SAAUA,KAGd,yBAAKI,UAAU,aACb,wCACA,2BACEA,UAAU,aACV9C,KAAK,QACL6C,MAAOtC,EAAM2B,MACbe,IAAKT,EAAS,CACZW,QAAS,6CAEXT,SAAUA,KAGd,yBAAKI,UAAU,aACb,wCACA,2BACEA,UAAU,aACV9C,KAAK,QACL6C,MAAOtC,EAAM4B,MACbO,SAAUA,KAGd,yBAAKI,UAAU,aACb,0CACA,2BACEA,UAAU,aACV9C,KAAK,UACL6C,MAAOtC,EAAM6B,QACbM,SAAUA,KAGd,yBAAKI,UAAU,aACb,0CACA,8BACEA,UAAU,aACV9C,KAAK,UACL6C,MAAOtC,EAAM8B,QACbK,SAAUA,KAGd,4BAAQI,UAAU,MAAMM,KAAK,SAASP,MAAM,UAA5C,aAMJ,S,iBClDJhB,EAAqB,CAAEX,uBAEdY,eANS,SAACvB,GAAD,MAAY,CAClCJ,eAAgBkD,EAAkB9C,MAKIsB,EAAzBC,EA5CS,SAAC,GAIlB,IAHL8B,EAGI,EAHJA,YACA1C,EAEI,EAFJA,oBAEI,EADJf,eAEA,OACE,yBACE2C,UAAU,gBACVe,QAAS,WACP3C,EAAoB0C,EAAYlD,MAGlC,yBAAKoC,UAAU,gBACb,uBAAGA,UAAU,SACX,2BACEA,UAAU,kBACVM,KAAK,cAQT,yBAAKN,UAAU,qBAEb,kBAAC,IAAD,CAAYgB,KAAK,KAAK9D,KAAM4D,EAAY5D,OACxC,yBAAK8C,UAAU,4BACb,wBAAIA,UAAU,gBAAgBc,EAAY5D,MAC1C,2BAAO8C,UAAU,iBAAiBc,EAAY1B,SAGlD,uBAAGY,UAAU,gBAAgBc,EAAYxB,cCNlCN,eAJS,SAACvB,GAAD,MAAY,CAClCL,SAAUoD,EAAoB/C,MAGQ,GAAzBuB,EA3BK,SAAC,GAAkB,IAAhB5B,EAAe,EAAfA,SACrB,OACE,yBAAK4C,UAAU,gBACb,wBAAIA,UAAU,cACZ,yBAAKA,UAAU,uBACb,uBAAGA,UAAU,SACX,oCAEF,yCACA,uCAED5C,EAASe,KAAI,SAACF,GACb,OACE,wBAAI+B,UAAU,aACZ,kBAAC,EAAD,CAAiBc,YAAa7C,aCT/BF,GARgBkD,YAAa,kBAEhBA,YAAa,eAAe,SAACnD,GACrD,MAAO,CACLA,cAIyBmD,YAAa,kBAAkB,SAACnD,GAC3D,MAAO,CACLA,eAmBSS,GAfgB0C,YAAa,kBAAkB,SAACnD,GAC3D,MAAO,CACLA,cAI+BmD,YACjC,wBACA,SAACnD,GACC,MAAO,CACLA,cAKuBmD,YAAa,kBAAkB,SAACnD,GAC3D,MAAO,CACLA,eCoBWkB,eAJS,SAACvB,GAAD,MAAY,CAClCyD,cAAezD,EAAML,SAASC,kBAGQ,KAAzB2B,EAlDQ,SAAC,GAA4C,IAA1CkC,EAAyC,EAAzCA,cAAyC,EAA1B9C,oBACvC,OACE,yBAAK4B,UAAU,kBACb,yBAAKA,UAAU,0BACZkB,GAAiBA,EAAchE,KAC9B,kBAAC,WAAD,KACG,IACD,yBAAK8C,UAAU,uBAEb,kBAAC,IAAD,CAAYgB,KAAK,KAAK9D,KAAMgE,EAAchE,OAC1C,4BAAKgE,EAAchE,MACnB,2BAAO8C,UAAU,iBAAiBkB,EAAc9B,QAElD,yBAAKY,UAAU,oBACb,wBAAIA,UAAU,mBACZ,wBAAIA,UAAU,aACZ,0BAAMA,UAAU,YAAhB,cACA,0BAAMA,UAAU,cAAckB,EAAchE,OAE9C,wBAAI8C,UAAU,aACZ,0BAAMA,UAAU,YAAhB,UACA,0BAAMA,UAAU,cAAckB,EAAc9B,QAE9C,wBAAIY,UAAU,aACZ,0BAAMA,UAAU,YAAhB,UACA,0BAAMA,UAAU,cAAckB,EAAc7B,QAE9C,wBAAIW,UAAU,aACZ,0BAAMA,UAAU,YAAhB,YACA,0BAAMA,UAAU,cAAckB,EAAc5B,UAE9C,wBAAIU,UAAU,aACZ,0BAAMA,UAAU,YAAhB,YACA,0BAAMA,UAAU,cAAckB,EAAc3B,aAMpD,yDCqFKP,eAXS,SAACvB,GAAD,MAAY,CAClCJ,eAAgBkD,EAAkB9C,OAGT,SAAC0D,GAC1B,MAAO,CACL5C,cAAe,SAACT,GAAD,OAAaqD,EAAS5C,EAAcT,KACnDC,cAAe,SAACD,GAAD,OAAaqD,EAASpD,EAAcD,QAIxCkB,EAvHA,SAAC,GAAsD,IAApDT,EAAmD,EAAnDA,cAAelB,EAAoC,EAApCA,eAAgBU,EAAoB,EAApBA,cAAoB,EACzCoB,mBAAS,CACjCiC,QAAQ,EACRC,cAAc,IAHmD,mBAC5D5D,EAD4D,KACrD+B,EADqD,KAKnE,OACE,oCACE,yBAAKQ,UAAU,kBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aACb,yBACEsB,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,OAAO,eACPC,YAAY,IACZC,cAAc,QACdC,eAAe,QACf9B,UAAU,yBAEV,0BAAM+B,EAAE,8CACR,4BAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,MACxB,0BAAMH,EAAE,+BACR,0BAAMA,EAAE,gCAGZ,yBAAK/B,UAAU,cACb,wCACA,oEAGJ,yBAAKA,UAAU,eACb,yBAAKA,UAAU,iBACb,2BACEA,UAAU,eACVmC,YAAY,kBACZvC,SAAU,SAACC,GAAD,OAAOtB,EAAcsB,EAAEC,OAAOC,QACxCO,KAAK,SAEP,yBACEgB,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,OAAO,eACPC,YAAY,IACZC,cAAc,QACdC,eAAe,QACf9B,UAAU,0BAEV,4BAAQgC,GAAG,KAAKC,GAAG,KAAKC,EAAE,MAC1B,0BAAME,GAAG,KAAKC,GAAG,KAAKC,GAAG,QAAQC,GAAG,YAGxC,4BACEvC,UAAU,MACVe,QAAS,WACPvB,EAAS,2BAAK/B,GAAN,IAAa2D,QAAS3D,EAAM2D,YAGtC,0BAAMpB,UAAU,WAAhB,KANF,eASA,4BACEA,UAAU,MACVe,QAAS,WACPhD,EAAcV,EAAeO,MAG/B,0BAAMoC,UAAU,WAAhB,KANF,kBAUA,4BACEA,UAAU,MACVe,QAAS,WACPvB,EAAS,2BAAK/B,GAAN,IAAa4D,cAAe5D,EAAM4D,kBAG5C,0BAAMrB,UAAU,WAAhB,KANF,kBASA,kBAAC,EAAD,CACEf,KAAMxB,EAAM2D,OACZlC,gBAAiB,WACfM,EAAS,2BAAK/B,GAAN,IAAa2D,QAAS3D,EAAM2D,aAIxC,kBAAC,EAAD,CACET,WAAYlD,EAAM4D,aAClBT,gBAAiB,WACfpB,EAAS,2BAAK/B,GAAN,IAAa4D,cAAe5D,EAAM4D,oBAIhD,yBAAKrB,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,YC5EKwC,MA5Bf,WACE,OACE,kBAAC,IAAD,CAAU7D,MAAOA,GACf,yBAAKqB,UAAU,OACb,yBAAKA,UAAU,YACb,yBACEsB,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,OAAO,OACPC,YAAY,IACZC,cAAc,QACdC,eAAe,QACf9B,UAAU,wBAEV,0BAAMoC,GAAG,IAAIC,GAAG,KAAKC,GAAG,KAAKC,GAAG,OAChC,0BAAMH,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKC,GAAG,MAC/B,0BAAMH,GAAG,IAAIC,GAAG,KAAKC,GAAG,KAAKC,GAAG,SAGpC,kBAAC,EAAD,SCfYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.284e6c6b.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst contactSlice = createSlice({\n  name: \"Contact\",\n  initialState: {\n    contacts: [],\n    currentContact: {},\n    searchTerm: \"\",\n  },\n  reducers: {\n    addContact(state, action) {\n      state.contacts.push({ id: state.contacts.length + 1, ...action.payload });\n    },\n    deleteContact(state, action) {\n      state.contacts = state.contacts.filter(\n        (item) => item.id !== action.payload\n      );\n\n      let currentContact =\n        action.payload === state.currentContact.id\n          ? {}\n          : state.contacts.length > 0\n          ? state.contacts[0]\n          : {};\n\n      state.currentContact = currentContact;\n    },\n    updateContact(state, action) {\n      const contacts = state.contacts.map((item) => {\n        if (item.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return item;\n        }\n      });\n\n      state.contacts = contacts;\n\n      state.currentContact = action.payload;\n    },\n    fetchContactDetails(state, action) {\n      const result = state.contacts.find((item) => item.id === action.payload);\n      state.currentContact = result;\n    },\n    searchContact(state, action) {\n      state.searchTerm = action.payload;\n    },\n  },\n});\n\nexport const {\n  addContact,\n  deleteContact,\n  updateContact,\n  fetchContactDetails,\n  searchContact,\n} = contactSlice.actions;\n\nexport default contactSlice.reducer;\n","import { combineReducers } from \"redux\";\nimport contactReducer from \"./contactSlice\";\nexport default combineReducers({\n  contacts: contactReducer,\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./reducers\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport default store;\n","import React, { Fragment, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { connect } from \"react-redux\";\nimport { addContact } from \"../../reducers/contactSlice\";\nconst AddContact = ({ show, onContactSubmit, addContact }) => {\n  const [state, setState] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    company: \"\",\n    address: \"\",\n  });\n  const { register, handleSubmit } = useForm();\n\n  const onSubmit = (data) => {\n    addContact({\n      name: state.name,\n      email: state.email,\n      phone: state.phone,\n      company: state.company,\n      address: state.address,\n    });\n\n    setState({ name: \"\", email: \"\", phone: \"\", company: \"\", address: \"\" });\n\n    onContactSubmit();\n  };\n\n  const onChange = (e) => {\n    setState({ ...state, [e.target.name]: e.target.value });\n  };\n\n  return (\n    <Fragment>\n      {show ? (\n        <div className=\"modal\">\n          <div className=\"modal-wrapper\">\n            <form className=\"submit-form\" onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"form-text\">\n                <label>Name</label>\n                <input\n                  className=\"inputField\"\n                  name=\"name\"\n                  ref={register({ required: true })}\n                  value={state.name}\n                  onChange={onChange}\n                />\n              </div>\n              <div className=\"form-text\">\n                <label>Email</label>\n                <input\n                  className=\"inputField\"\n                  name=\"email\"\n                  value={state.email}\n                  ref={register({\n                    pattern: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/,\n                  })}\n                  onChange={onChange}\n                />\n              </div>\n              <div className=\"form-text\">\n                <label>Phone</label>\n                <input\n                  className=\"inputField\"\n                  name=\"phone\"\n                  value={state.phone}\n                  onChange={onChange}\n                />\n              </div>\n              <div className=\"form-text\">\n                <label>Company</label>\n                <input\n                  className=\"inputField\"\n                  name=\"company\"\n                  value={state.company}\n                  onChange={onChange}\n                />\n              </div>\n              <div className=\"form-text\">\n                <label>Address</label>\n                <textarea\n                  className=\"inputField\"\n                  name=\"address\"\n                  value={state.address}\n                  onChange={onChange}\n                />\n              </div>\n              <button className=\"btn\" type=\"submit\" value=\"Submit\">\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst mapDispatchToProps = { addContact };\nexport default connect(null, mapDispatchToProps)(AddContact);\n","import { createSelector } from \"reselect\";\n\nexport const getContacts = (state) => state.contacts.contacts;\n\nexport const getCurrentContact = (state) => state.contacts.currentContact;\n\nexport const getSearchTerm = (state) => state.contacts.searchTerm;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getSearchTerm],\n  (contacts, searchTerm) => {\n    if (searchTerm !== \"\") {\n      const searchResult = contacts.filter(\n        (item) =>\n          item.name.includes(searchTerm) ||\n          item.email.includes(searchTerm) ||\n          item.company.includes(searchTerm) ||\n          item.address.includes(searchTerm)\n      );\n\n      return searchResult;\n    } else {\n      return contacts;\n    }\n  }\n);\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { connect } from \"react-redux\";\nimport { updateContact } from \"../../reducers/contactSlice\";\nimport { getCurrentContact } from \"../../selectors/index\";\nconst UpdateContact = ({\n  updateshow,\n  updateContact,\n  currentContact,\n  onContactUpdate,\n}) => {\n  const [state, setState] = useState({});\n  const { register, handleSubmit } = useForm();\n\n  useEffect(() => {\n    setState(currentContact);\n  }, [currentContact]);\n\n  const onSubmit = (data) => {\n    updateContact({\n      id: state.id,\n      name: state.name,\n      email: state.email,\n      phone: state.phone,\n      company: state.company,\n      address: state.address,\n    });\n\n    setState({ name: \"\", email: \"\", phone: \"\", company: \"\", address: \"\" });\n\n    onContactUpdate();\n  };\n\n  const onChange = (e) => {\n    setState({ ...state, [e.target.name]: e.target.value });\n  };\n\n  return (\n    <Fragment>\n      {updateshow ? (\n        <div className=\"modal\">\n          <div className=\"modal-wrapper\">\n            <form className=\"submit-form\" onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"form-text\">\n                <label>Name</label>\n                <input\n                  className=\"inputField\"\n                  name=\"name\"\n                  ref={register({ required: true })}\n                  value={state.name}\n                  onChange={onChange}\n                />\n              </div>\n              <div className=\"form-text\">\n                <label>Email</label>\n                <input\n                  className=\"inputField\"\n                  name=\"email\"\n                  value={state.email}\n                  ref={register({\n                    pattern: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/,\n                  })}\n                  onChange={onChange}\n                />\n              </div>\n              <div className=\"form-text\">\n                <label>Phone</label>\n                <input\n                  className=\"inputField\"\n                  name=\"phone\"\n                  value={state.phone}\n                  onChange={onChange}\n                />\n              </div>\n              <div className=\"form-text\">\n                <label>Company</label>\n                <input\n                  className=\"inputField\"\n                  name=\"company\"\n                  value={state.company}\n                  onChange={onChange}\n                />\n              </div>\n              <div className=\"form-text\">\n                <label>Address</label>\n                <textarea\n                  className=\"inputField\"\n                  name=\"address\"\n                  value={state.address}\n                  onChange={onChange}\n                />\n              </div>\n              <button className=\"btn\" type=\"submit\" value=\"Submit\">\n                Update\n              </button>\n            </form>\n          </div>\n        </div>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  currentContact: getCurrentContact(state),\n});\n\nconst mapDispatchToProps = { updateContact };\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateContact);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getCurrentContact } from \"../../selectors/index\";\nimport { fetchContactDetails } from \"../../reducers/contactSlice\";\nimport UserAvatar from \"react-user-avatar\";\n\nconst ContactListItem = ({\n  contactItem,\n  fetchContactDetails,\n  currentContact,\n}) => {\n  return (\n    <div\n      className=\"contact-lists\"\n      onClick={() => {\n        fetchContactDetails(contactItem.id);\n      }}\n    >\n      <div className=\"contact-list\">\n        <p className=\"adder\">\n          <input\n            className=\"custom-checkbox\"\n            type=\"checkbox\"\n            // checked={\n            //   currentContact && currentContact.id === contactItem.id\n            //     ? \"checked\"\n            //     : \"false\"\n            // }\n          />\n        </p>\n        <div className=\"contact-list-user\">\n          {/* <span className=\"avatar\"></span> */}\n          <UserAvatar size=\"48\" name={contactItem.name} />\n          <div className=\"contact-list-userDetails\">\n            <h4 className=\"contact-name\">{contactItem.name}</h4>\n            <small className=\"contact-email\">{contactItem.email}</small>\n          </div>\n        </div>\n        <p className=\"company-name\">{contactItem.company}</p>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  currentContact: getCurrentContact(state),\n});\n\nconst mapDispatchToProps = { fetchContactDetails };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport ContactListItem from \"./ContactListItem\";\nimport { getFilteredContacts } from \"../../selectors/index\";\n\nconst ContactList = ({ contacts }) => {\n  return (\n    <div className=\"contact-list\">\n      <ul className=\"list-style\">\n        <div className=\"contact-list-header\">\n          <p className=\"adder\">\n            <span>+</span>\n          </p>\n          <p>Basic info</p>\n          <p>Company</p>\n        </div>\n        {contacts.map((item) => {\n          return (\n            <li className=\"user-list\">\n              <ContactListItem contactItem={item} />\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: getFilteredContacts(state),\n});\n\nexport default connect(mapStateToProps, {})(ContactList);\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const fetchContacts = createAction(\"FETCH_CONTACTS\");\n\nexport const addContact = createAction(\"ADD_CONTACT\", (payload) => {\n  return {\n    payload,\n  };\n});\n\nexport const deleteContact = createAction(\"DELETE_CONTACT\", (payload) => {\n  return {\n    payload,\n  };\n});\n\nexport const updateContact = createAction(\"UPDATE_CONTACT\", (payload) => {\n  return {\n    payload,\n  };\n});\n\nexport const fetchContactDetails = createAction(\n  \"FETCH_CONTACT_DETAIL\",\n  (payload) => {\n    return {\n      payload,\n    };\n  }\n);\n\nexport const searchContact = createAction(\"SEARCH_CONTACT\", (payload) => {\n  return {\n    payload,\n  };\n});\n","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport UserAvatar from \"react-user-avatar\";\nconst ContactDetails = ({ contactDetail, fetchContactDetails }) => {\n  return (\n    <div className=\"contact-detail\">\n      <div className=\"contact-detail-wrapper\">\n        {contactDetail && contactDetail.name ? (\n          <Fragment>\n            {\" \"}\n            <div className=\"contact-detail-user\">\n              {/* <span class=\"user-avatar\"></span> */}\n              <UserAvatar size=\"80\" name={contactDetail.name} />\n              <h3>{contactDetail.name}</h3>\n              <small className=\"contact-email\">{contactDetail.email}</small>\n            </div>\n            <div className=\"lists-of-details\">\n              <ul className=\"flex-list-style\">\n                <li className=\"flex-list\">\n                  <span className=\"sub-head\">Full name:</span>\n                  <span className=\"sub-detail\">{contactDetail.name}</span>\n                </li>\n                <li className=\"flex-list\">\n                  <span className=\"sub-head\">Email:</span>\n                  <span className=\"sub-detail\">{contactDetail.email}</span>\n                </li>\n                <li className=\"flex-list\">\n                  <span className=\"sub-head\">Phone:</span>\n                  <span className=\"sub-detail\">{contactDetail.phone}</span>\n                </li>\n                <li className=\"flex-list\">\n                  <span className=\"sub-head\">Company:</span>\n                  <span className=\"sub-detail\">{contactDetail.company}</span>\n                </li>\n                <li className=\"flex-list\">\n                  <span className=\"sub-head\">Address:</span>\n                  <span className=\"sub-detail\">{contactDetail.address}</span>\n                </li>\n              </ul>\n            </div>\n          </Fragment>\n        ) : (\n          <div>No Contact Selected</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  contactDetail: state.contacts.currentContact,\n});\n\nexport default connect(mapStateToProps, null)(ContactDetails);\n","import React, { useState } from \"react\";\nimport AddContact from \"../AddContact/AddContact\";\nimport UpdateContact from \"../UpdateContact/UpdateContact\";\nimport ContactList from \"../ContactList/ContactList\";\nimport { connect } from \"react-redux\";\nimport { searchContact, deleteContact } from \"../../actions/contactAction\";\nimport ContactDetails from \"../ContactDetails/ContactDetails\";\nimport { getCurrentContact } from \"../../selectors\";\nconst Header = ({ searchContact, currentContact, deleteContact }) => {\n  const [state, setState] = useState({\n    isOpen: false,\n    isUpdateShow: false,\n  });\n  return (\n    <>\n      <div className=\"contact-screen\">\n        <div className=\"page-header\">\n          <div className=\"page-icon\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"32\"\n              height=\"32\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"feather feather-users\"\n            >\n              <path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path>\n              <circle cx=\"9\" cy=\"7\" r=\"4\"></circle>\n              <path d=\"M23 21v-2a4 4 0 0 0-3-3.87\"></path>\n              <path d=\"M16 3.13a4 4 0 0 1 0 7.75\"></path>\n            </svg>\n          </div>\n          <div className=\"page-title\">\n            <h2>contacts</h2>\n            <small>welcome to FlatCRM contact page</small>\n          </div>\n        </div>\n        <div className=\"contact-add\">\n          <div className=\"input-wrapper\">\n            <input\n              className=\"custom-input\"\n              placeholder=\"Search contacts\"\n              onChange={(e) => searchContact(e.target.value)}\n              type=\"text\"\n            />\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"16\"\n              height=\"16\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"feather feather-search\"\n            >\n              <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n              <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n            </svg>\n          </div>\n          <button\n            className=\"btn\"\n            onClick={() => {\n              setState({ ...state, isOpen: !state.isOpen });\n            }}\n          >\n            <span className=\"addIcon\">+</span>\n            Add Contact\n          </button>\n          <button\n            className=\"btn\"\n            onClick={() => {\n              deleteContact(currentContact.id);\n            }}\n          >\n            <span className=\"addIcon\">-</span>\n            Delete Contact\n          </button>\n\n          <button\n            className=\"btn\"\n            onClick={() => {\n              setState({ ...state, isUpdateShow: !state.isUpdateShow });\n            }}\n          >\n            <span className=\"addIcon\">-</span>\n            Update Contact\n          </button>\n          <AddContact\n            show={state.isOpen}\n            onContactSubmit={() => {\n              setState({ ...state, isOpen: !state.isOpen });\n            }}\n          />\n\n          <UpdateContact\n            updateshow={state.isUpdateShow}\n            onContactUpdate={() => {\n              setState({ ...state, isUpdateShow: !state.isUpdateShow });\n            }}\n          />\n        </div>\n        <div className=\"contact-wrapper\">\n          <ContactList />\n          <ContactDetails />\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  currentContact: getCurrentContact(state),\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    searchContact: (payload) => dispatch(searchContact(payload)),\n    deleteContact: (payload) => dispatch(deleteContact(payload)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Header from \"./components/Header/Header\";\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <div className=\"side-bar\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"#fff\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"feather feather-menu\"\n          >\n            <line x1=\"3\" y1=\"12\" x2=\"21\" y2=\"12\"></line>\n            <line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line>\n            <line x1=\"3\" y1=\"18\" x2=\"21\" y2=\"18\"></line>\n          </svg>\n        </div>\n        <Header />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}